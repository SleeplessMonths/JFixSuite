import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.security.Permission;
import java.util.Arrays;
import java.util.Collection;
import java.util.Locale;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class <testClassName> {
    <className> program;
    String input;
    String expectedOutput;
    String actualOutput;
    ByteArrayOutputStream stdOut;

    @Parameterized.Parameters
    public static Collection data() {
        return Arrays.asList(new Object[][]{ <inputOutput> });
    }

    public <testClassName>(String input, String expectedOutput) {
        this.input = input;
        this.expectedOutput = expectedOutput;
    }

    protected static class ExitException extends SecurityException
    {
        public final int status;
        public ExitException(int status)
        {
            this.status = status;
        }
    }

    private static class NoExitSecurityManager extends SecurityManager
    {
        @Override
        public void checkPermission(Permission perm)
        {
            // allow anything.
        }
        @Override
        public void checkPermission(Permission perm, Object context)
        {
            // allow anything.
        }
        @Override
        public void checkExit(int status)
        {
            throw new ExitException(status);
        }
    }

    @Before
    public void setUp() throws Exception
    {
        System.setSecurityManager(new NoExitSecurityManager());
    }

    @After
    public void tearDown() throws Exception
    {
        System.setSecurityManager(null); // or save and restore original
    }

    @Test(timeout = 5000)
    public void test() throws IOException, Exception, Throwable {
        // change locale to avoid problems with e.g. decimal separators
        Locale.setDefault(Locale.ROOT);

        program = new <className>();
        stdOut = new ByteArrayOutputStream();

        System.setIn(new ByteArrayInputStream(input.getBytes()));
        System.setOut(new PrintStream(stdOut));

        try {
            program.main(new String[0]);
        } catch (ExitException e) {
            // do nothing, just avoids terminating due to random System.exit calls
        }


        actualOutput = stdOut.toString().trim();

        assertEquals(expectedOutput.replaceAll("\\s+", " "), actualOutput.replaceAll("\\s+", " "));
    }
}